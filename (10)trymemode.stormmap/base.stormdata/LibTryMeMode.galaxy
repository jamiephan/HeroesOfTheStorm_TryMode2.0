include "TriggerLibs/NativeLib"
// include "ModuleMimicLibs/MimicLibsLoader"
include "Modules/LibModuleLoader"

//--------------------------------------------------------------------------------------------------
// Library: Try Mode 2.0
//--------------------------------------------------------------------------------------------------
// Validating: templates

// Trigger Declarations
trigger libTRYM_gt_MapInit;
trigger libTRYM_gt_Greetings;
trigger libTRYM_gt_ForceBackslashKeySyncQACheat;

//--------------------------------------------------------------------------------------------------
// Library: Try Mode 2.0
//--------------------------------------------------------------------------------------------------
// Validating: templates

// External Library Initialization
void libTRYM_InitLibraries () {
    libNtve_InitVariables();
    // libMICL_InitLib();
    libMODL_InitLib();
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: MapInit
//--------------------------------------------------------------------------------------------------
bool libTRYM_gt_MapInit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Try Me Lib Initialized"));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText(("Game Loaded from: " + GameMapPath())));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText("Lets start by saying 'hi', shall we?"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libTRYM_gt_MapInit_Init () {
    libTRYM_gt_MapInit = TriggerCreate("libTRYM_gt_MapInit_Func");
    TriggerAddEventMapInit(libTRYM_gt_MapInit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Greetings
//--------------------------------------------------------------------------------------------------
bool libTRYM_gt_Greetings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringToText("Greetings, ") + (PlayerName(EventPlayer()) + StringToText(". Welcome to Try Mode 2.0!"))));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringToText(("Your Player ID is: " + IntToString(EventPlayer()))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libTRYM_gt_Greetings_Init () {
    libTRYM_gt_Greetings = TriggerCreate("libTRYM_gt_Greetings_Func");
    TriggerAddEventChatMessage(libTRYM_gt_Greetings, c_playerAny, "hi", true);
    TriggerAddEventChatMessage(libTRYM_gt_Greetings, c_playerAny, "hello", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Force Backslash Key Sync QA Cheat
//--------------------------------------------------------------------------------------------------
bool libTRYM_gt_ForceBackslashKeySyncQACheat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_debugpanel;
    int lv_QAcheatpanel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_debugpanel = c_invalidDialogControlId;
    lv_QAcheatpanel = c_invalidDialogId;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_debugpanel = libUIUI_gv_uIDebugPanel.lv_mainDialog;
    lv_QAcheatpanel = libSprt_gv_qACheatsControlsPanel.lv_mainDialog;
    if ((DialogControlIsVisible(lv_debugpanel, EventPlayer()) == true)) {
        DialogSetVisible(lv_QAcheatpanel, PlayerGroupAll(), true);
    }
    else {
        DialogSetVisible(lv_QAcheatpanel, PlayerGroupAll(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libTRYM_gt_ForceBackslashKeySyncQACheat_Init () {
    libTRYM_gt_ForceBackslashKeySyncQACheat = TriggerCreate("libTRYM_gt_ForceBackslashKeySyncQACheat_Func");
    TriggerAddEventKeyPressed(libTRYM_gt_ForceBackslashKeySyncQACheat, c_playerAny, c_keyBackSlash, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

void libTRYM_InitTriggers () {
    libTRYM_gt_MapInit_Init();
    libTRYM_gt_Greetings_Init();
    libTRYM_gt_ForceBackslashKeySyncQACheat_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libTRYM_InitLib_completed = false;

void libTRYM_InitLib () {
    if (libTRYM_InitLib_completed) {
        return;
    }

    libTRYM_InitLib_completed = true;

    libTRYM_InitLibraries();
    libTRYM_InitTriggers();
}
 

